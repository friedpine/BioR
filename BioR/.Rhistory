library(FactoMineR)
log2(0.1)
log2(1.1)
log2(0.2)
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
for (i in 1:counts){
CVs[[i]]=nonzero_std_mean(datas[[i]],1,2,recs[i])
}
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
plot_scatter_3sigma = function(datas,counts,recs,colors){
CVs = lapply(datas,function(x) nonzero_std_mean(x,1,2,'q'))
return(CVs)
}
source('~/GitHub/BioR/BioR/CV_regerssion.R')
plot_scatter_3sigma = function(datas,counts,recs,colors){
CVs = apply(1:counts,function(x) nonzero_std_mean(datas[[x]],1,2,recs[x]))
return(CVs)
}
CVs = apply(1:counts,function(x) nonzero_std_mean(datas[[x]],1,2,recs[x]))
source('~/GitHub/BioR/BioR/CV_regerssion.R')
plot_scatter_3sigma = function(datas,counts,recs,colors){
CVs = lapply(1:counts,function(x) nonzero_std_mean(datas[[x]],1,2,recs[x]))
return(CVs)
}
CVs = lapply(1:counts,function(x) nonzero_std_mean(datas[[x]],1,2,recs[x]))
return(CVs)
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
plot_scatter_3sigma = function(datas,counts,recs,colors){
CVs = sapply(1:counts,function(x) nonzero_std_mean(datas[[x]],1,2,recs[x]))
return(CVs)
}
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/Samples_cluster.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/CV_regerssion.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
tmp
tmp
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
source('~/GitHub/BioR/BioR/GSM_expression_process.R')
GEO_samples <- read.delim("E:/bdyun/00.lab/31.cRNA/samples/GEO_samples.txt")
View(GEO_samples)
library(ggplot2)
source('~/GitHub/BioR/BioR/CNV_coverage_genome.R')
GEO_samples
GEO_samples$name.for.GEO
gsub(".fastq.gz","",GEO_samples$name.for.GEO)
GEO_samples$names = gsub(".fastq.gz","",GEO_samples$name.for.GEO)
library(RODBC)
GEO_samples
GEO_samples$names
GEO_samples[65,]
GEO_samples <- read.delim("E:/bdyun/00.lab/31.cRNA/samples/GEO_samples_2.txt")
GEO_samples <- read.delim("E:/bdyun/00.lab/31.cRNA/samples/GEO_samples_2.txt",header=F)
GEO_samples
GEO_samples[1,]
GEO_samples <- read.delim("E:/bdyun/00.lab/31.cRNA/samples/GEO_samples_2.txt",header=F)
GEO_samples$names = gsub(".fastq.gz","",GEO_samples$name.for.GEO)
GEO_samples <- read.delim("E:/bdyun/00.lab/31.cRNA/samples/GEO_samples_2.txt",header=F)
GEO_samples$names = gsub(".fastq.gz","",GEO_samples$V4)
GEO_samples
GEO_samples[1,]
library(RODBC)
channel <- odbcConnect("p00", uid="root", pwd="123456")
FPKM_super_HEK = sqlQuery(channel,"select * from p01.HEK_FPKM")
samples = sqlQuery(channel,"select * from p01.samples")
samples
View(GEO_samples)
merge(samples,GEO_samples,by.x="real",by.y="V1")
GEO_fq1 = subset(GEO_samples,type="fq1")
View(GEO_fq1)
GEO_fq1 = subset(GEO_samples,V2="fq1")
View(GEO_samples)
GEO_fq1 = subset(GEO_samples,V2=="fq1")
View(GEO_fq1)
View(GEO_samples)
GEO_fq1 = subset(GEO_samples,V2=="fq1" or V2=="raw_fq1")
GEO_fq1 = subset(GEO_samples,V2=="fq1" | V2=="raw_fq1")
merge(samples,GEO_fq1,by.x="real",by.y="V1")
merged = merge(samples,GEO_fq1,by.x="real",by.y="V1")
View(merged)
merged[,c(1:8,13)]
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
colnames(merged$names) = "GEO_name"
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
colname(merged$names) = "GEO_name"
colname(merged) = c(colnames(samples),"GEO_name")
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
merged[,c(1:8,13)]
merged[1,c(1:8,13)]
c(colnames(samples),"GEO_name")
colnames(merged) = c(colnames(samples),"GEO_name")
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
colnames(merged) = c(colnames(merged)[1:12],"GEO_name")
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
merged[,c(1:8,13)]
merged[1,c(1:8,13)]
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
merged = merge(samples,GEO_fq1,by.x="exp",by.y="V1")
colnames(merged) = c(colnames(merged)[1:12],"GEO_name")
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
GEO_samples <- read.delim("E:/bdyun/00.lab/31.cRNA/samples/GEO_samples_2.txt",header=F)
GEO_samples$names = gsub(".R1.fastq.gz","",GEO_samples$V4)
GEO_fq1 = subset(GEO_samples,V2=="fq1" | V2=="raw_fq1")
merged = merge(samples,GEO_fq1,by.x="exp",by.y="V1")
colnames(merged) = c(colnames(merged)[1:12],"GEO_name")
sqlUpdate(channel,merged[,c(1:8,13)],tablename="p01.samples")
samples = sqlQuery(channel,"select * from p01.samples")
samples
samples = sqlQuery(channel,"select * from p01.samples where length(geo_name)>2")
samples
FPKM_super_HEK[1,]
colnames(FPKM_super_HEK)
colnames(FPKM_super_HEK)[4:14]
FPKM_super_HEK = sqlQuery(channel,"select * from p01.HEK_FPKM_gencode")
samples
subset(samples,exp=="HEKT1")[9]
subset(samples,exp=="HEKT1")[,9]
subset(samples,exp=="HEKT1")
subset(samples,exp=="HEKT01")
subset(samples,exp=="HEKT01")[9]
subset(samples,exp=="HEKT01")[9][1]
subset(samples,exp=="HEKT01")[1,9][1]
subset(samples,exp=="HEKT01")[1,9]
for (i in colnames(FPKM_super_HEK)[4:21]):{
geo_name = subset(samples,exp=="HEKT01")[1,9]
write(x=FPKM_super_HEK[,c(1,2,3,i)],file=paste(geo_name,"_FPKM_gencode.txt",sep=""))
}
for (i in colnames(FPKM_super_HEK)[4:21]){
geo_name = subset(samples,exp=="HEKT01")[1,9]
write(x=FPKM_super_HEK[,c(1,2,3,i)],file=paste(geo_name,"_FPKM_gencode.txt",sep=""))
}
for (i in colnames(FPKM_super_HEK)[4:21]){
geo_name = subset(samples,exp=="HEKT01")[1,9]
tmp = FPKM_super_HEK[,c("gene","cat","genename",i)]
colnames(tmp) = c("ENSEMBL_ID","category","gene_name","FPKM")
write(x=,file=paste(geo_name,"_FPKM_gencode.txt",sep=""))
}
for (i in colnames(FPKM_super_HEK)[4:21]){
geo_name = subset(samples,exp=="HEKT01")[1,9]
tmp = FPKM_super_HEK[,c("gene","cat","genename",i)]
colnames(tmp) = c("ENSEMBL_ID","category","gene_name","FPKM")
write(x=tmp,file=paste(geo_name,"_FPKM_gencode.txt",sep=""))
}
for (i in colnames(FPKM_super_HEK)[4:21]){
geo_name = subset(samples,exp=="HEKT01")[1,9]
tmp = FPKM_super_HEK[,c("gene","cat","genename",i)]
colnames(tmp) = c("ENSEMBL_ID","category","gene_name","FPKM")
write.table(x=tmp,file=paste(geo_name,"_FPKM_gencode.txt",sep=""))
}
for (i in colnames(FPKM_super_HEK)[4:21]){
geo_name = subset(samples,exp==i)[1,9]
tmp = FPKM_super_HEK[,c("gene","cat","genename",i)]
colnames(tmp) = c("ENSEMBL_ID","category","gene_name","FPKM")
write.table(x=tmp,file=paste(geo_name,"_FPKM_gencode.txt",sep=""))
}
FPKM_super_mouse = sqlQuery(channel,"select * from p01.p01_FPKM")
FPKM_super_mouse = sqlQuery(channel,"select * from p01.p01_FPKM")
channel <- odbcConnect("p00", uid="root", pwd="123456")
channel <- odbcConnect("p00", uid="root", pwd="123456")
FPKM_super_mouse = sqlQuery(channel,"select * from p01.p01_FPKM")
for (i in colnames(FPKM_super_mouse)[5:56]){
geo_name = subset(samples,exp==i)[1,9]
tmp = FPKM_super_HEK[,c("genename",i)]
colnames(tmp) = c("gene_name","FPKM")
write.table(x=tmp,file=paste(geo_name,"_FPKM_gencode.txt",sep=""))
}
for (i in colnames(FPKM_super_mouse)[5:56]){
geo_name = subset(samples,exp==i)[1,9]
tmp = FPKM_super_mouse[,c("genename",i)]
colnames(tmp) = c("gene_name","FPKM")
write.table(x=tmp,file=paste(geo_name,"_FPKM_gencode.txt",sep=""))
}
